{"name":"BART","tagline":"Behavioural Analysis and Regression Toolkit","body":"# Introduction\r\n\r\nThe Behavioural Analysis and Regression Toolkit is based on [TRAPpy](https://github.com/ARM-software/trappy). The primary goal is to assert behaviours using the FTrace output from the kernel\r\n\r\n## Target Audience\r\nThe framework is designed to cater to a wide range of audience. Aiding developers as well as automating\r\nthe testing of \"difficult to test\" behaviours.\r\n\r\n### Kernel Developers\r\n\r\nMaking sure that the code that you are writing is doing the right thing.\r\n\r\n### Performance Engineers\r\n\r\nPlotting/Asserting performance behaviours between different revisions of the kernel\r\n\r\n### Quality Assurance/Release Engineers\r\nVerifying behaviours when different components/patches are integrated\r\n\r\n# Installation\r\n\r\nClone the [BART]( https://github.com/ARM-software/bart) and [TRAPpy]( https://github.com/ARM-software/trappy) repos\r\n\r\n    git clone git@github.com:ARM-software/bart.git\r\n    git clone git@github.com:ARM-software/trappy.git\r\n\r\nAdd the directories to your PYTHONPATH\r\n\r\n    export PYTHONPATH=$BASE_DIR/bart:$BASE_DIR/trappy:$PYTHONPATH\r\n\r\nInstall dependencies\r\n\r\n    apt-get install ipython-notebook python-pandas\r\n\r\n[IPython](http://ipython.org/notebook.html) notebook is a web based interactive python programming interface.\r\nIt is required if you plan to use interactive plotting in BART.\r\n\r\n# Trace Analysis Language\r\n\r\nBART also provides a generic Trace Analysis Language, which allows the user to construct complex relation statements on trace data and assert their expected behaviours. The usage of the Analyzer module can be seen for the thermal behaviours [here](https://github.com/sinkap/bart/blob/master/notebooks/thermal/Thermal.ipynb)\r\n\r\n# Scheduler Assertions\r\n\r\nEnables assertion and the calculation of the following parameters:\r\n\r\n### Runtime\r\n\r\nThe total time that the task spent on a CPU executing.\r\n\r\n### Switch\r\n\r\nAssert that a task switched between CPUs/Clusters in a given window of time\r\n\r\n### Duty Cycle\r\n\r\nThe ratio of the execution time to the total time.\r\n\r\n### Period\r\n\r\nThe average difference between two switch-in or two switch-out events of a task\r\n\r\n### First CPU\r\n\r\nThe first CPU that a task ran on.\r\n\r\n### Residency\r\n\r\nCalculate and assert the total residency of a task on a CPU or cluster\r\n\r\n### Examples\r\n\r\nThe Scheduler assertions also use TRAPpy's EventPlot to provide a kernelshark like timeline\r\nfor the tasks under consideration. (in IPython notebooks).\r\n\r\nHere is an Example of such a plot:\r\n\r\nA notebook explaining the usage of the framework for asserting the deadline scheduler behaviours can be seen [here](https://rawgit.com/sinkap/0abbcc4918eb228b8887/raw/a1b4d6e0079f4ea0368d595d335bc340616501ff/SchedDeadline.html)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}